"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY",default=get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default='1'))

ALLOWED_HOSTS = ['*']

DJANGO_LOG_LEVEL = os.environ.get("DJANGO_LOG_LEVEL", default="INFO")
LOGGER_LOG_LEVEL = os.environ.get("LOGGER_LOG_LEVEL", default="INFO")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {clientip} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {lineno} {funcName} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter':'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': ('INFO' if DJANGO_LOG_LEVEL is None else DJANGO_LOG_LEVEL) ,
            'propagate': True,
        },
        'pages':{
            'handlers': ['console'],
            'level': ('DEBUG' if DEBUG else 'INFO'),
            'formatter':'simple',
            'propagate': True,
        },
        'domain': {
            'handlers': ['console'],
            'level': ('INFO' if LOGGER_LOG_LEVEL is None else LOGGER_LOG_LEVEL) ,
            'propagate': True,
        }
    },
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'pages'
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            str(BASE_DIR.joinpath('templates')),
            str(BASE_DIR.joinpath('pages/templates'))
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    str(BASE_DIR.joinpath('locale')),
]

# i18n :
# use {% translate 'original text' %}  in template html
# use gettext('original text') in javascript
# create locale message file for template : django-admin makemessages --locale=zh --extension html
# create locale message file for javascript : django-admin makemessages -d djangojs --locale=zh
# edit translation content of django.po  djangojs.po files
# compile translation message file: django-admin compilemessages 
#

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000"
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# If got static files not found error , read following document
# https://docs.djangoproject.com/en/3.1/howto/static-files/deployment/
# 
#
# If run gunicorn , it search static files path of STATIC_ROOT setting
# In following sample , it's BASE_DIR/staticfiles
# First, Run :  python manage.py collectstatic , this command copy static files of whole project to staticfiles folder
# for example, 
# 1. add following  static files settings
# 2. install gunicorn and dj-static package
# 3. change wsgi.py
#       ...
#       from dj_static import Cling
#       ...
#       application = Cling(get_wsgi_application())
#
# 4. run python manage.py collectstatic , copy files to staticfiles folder
# 5. run : gunicorn --bind 0.0.0.0:5000 config.wsgi:application
# check every thing is ok !

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Without set this , default will find files in STATICFILES_DIRS
"""
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]
"""


# In order to use Memcached in Mac , install memcached first: 
# brew install memcached
# brew services start memcached

CACHES = {
    'default': {
        #'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        #'LOCATION': '127.0.0.1:11211',
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'investment-dashboard',
        'TIMEOUT': 12*60*60,
    }
}